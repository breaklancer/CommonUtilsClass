/** 
* @Function： DateUtil.java 
* @Description:TODO
*
*
* @version: v1.0.0
* @auther: GW00174103
* @date: 2021年1月21日
*
* Modification History:
* Date         Author          Version            Description
*---------------------------------------------------------*
* 2021年1月21日      GW00174103         v1.0.0             首次创建
*/
package com.ww.youxuan.util;

import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.OffsetDateTime;
import java.time.Period;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;

/**
 * @Title: DateUtil.java
 * @Package com.ww.youxuan.util
 * @Description: TODO(用一句话描述该文件做什么)
 * @author GW00174103
 * @date 2021年1月21日
 * @version V1.0 @Function： DateUtil.java
 * @Description: 关键类： Instant 瞬时实例 LocalDate 本地日期，不包含具体时间 例如：2014-01-14
 *               可以用来记录生日、纪念日、加盟日等 LocalTime 本地时间，不包含日期 LocalDateTime
 *               组合了日期和时间，但不包含时差和时区信息 ZonedDateTime 最完整的日期时间，包含时区和相对UTC或格林威治的时差
 *               DateTimeFormatter 解析、格式化时间
 *               Java 8 的所有日期和时间API都是不可变类并且线程安全，
 *               而现有的Date和Calendar API中的java.util.Date和SimpleDateFormat是非线程安全的
 *
 *
 * @version: v1.0.0
 * @auther: GW00174103
 * @date: 2021年1月21日上午8:59:06
 *
 *        Modification History: Date Author Version Description
 *        ---------------------------------------------------------* 2021年1月21日
 *        GW00174103 v1.0.0 首次创建
 */
public class DateUtil {

	// 获取今天的日期
	public static LocalDate getCurrentDate() {
		return LocalDate.now();
	}

	// 处理特定日期
	public static LocalDate handleSpecilDate(int year, int month, int dayofMonth) {
		return LocalDate.of(year, month, dayofMonth);
	}

	// 处理周期性的日期
	public static boolean cycleDate(int year, int month, int dayofMonth) {
		LocalDate today = LocalDate.now();
		LocalDate cycleDate = LocalDate.of(year, month, dayofMonth);
		return today.equals(cycleDate);
	}

	// 获取当前时间
	public static LocalTime getCurrentTime() {
		return LocalTime.now();
	}

	// 增加小时
	public static LocalTime plusHours(long hoursToAdd) {
		return LocalTime.now().plusHours(hoursToAdd);
	}

	// 计算一定时间后的日期，用户选择ChronoUnit
	public static LocalDate plusDate(long amountToAdd, ChronoUnit chronoUnit) {
		LocalDate today = LocalDate.now();
		LocalDate nextDay = today.plus(amountToAdd, chronoUnit);
		return nextDay;
	}

	public static void clock() {
		// 根据系统时间返回当前时间并设置为UTC。
		Clock clock = Clock.systemUTC();
		System.out.println("Clock : " + clock);
		// 根据系统时钟区域返回时间
		Clock defaultClock = Clock.systemDefaultZone();
		System.out.println("Clock : " + clock);
	}

	public static boolean isBefore(LocalDate date1, LocalDate date2) {
		return date1.isBefore(date2) ? true : false;
	}

	public static boolean isAfter(LocalDate date1, LocalDate date2) {
		return date1.isAfter(date2) ? true : false;
	}

	// 获取特定时区下面的时间
	/**
	 * 
	 * @param zone
	 *            特定时区 例：America/New_York
	 */
	public static LocalDateTime getZoneTime(String zone) {
		// 设置时区
		ZoneId zoneid = ZoneId.of(zone);
		LocalDateTime localtDateAndTime = LocalDateTime.now();
		ZonedDateTime dateAndTimeInNewYork = ZonedDateTime.of(localtDateAndTime, zoneid);
		return dateAndTimeInNewYork.toLocalDateTime();
	}

	// 使用 YearMonth类处理特定的日期
	public static YearMonth checkExpiry(int year, Month month) {
		return YearMonth.of(year, month);
	}

	// 检查闰年
	public static boolean isLeapYear() {
		return LocalDate.now().isLeapYear();
	}

	// 按需计算两个日期之间的差值
	public static long calcDateDays(LocalDate date1, LocalDate date2, TemporalUnit unit) {
		Period periodToNextJavaRelease = Period.between(date1, date2);
		return periodToNextJavaRelease.get(unit);
	}

	// 包含时差信息的日期和时间
	public static void ZoneOffset() {
		LocalDateTime datetime = LocalDateTime.of(2018, Month.FEBRUARY, 14, 19, 30);
		ZoneOffset offset = ZoneOffset.of("+05:30");
		OffsetDateTime date = OffsetDateTime.of(datetime, offset);
		System.out.println("Date and Time with timezone offset in Java : " + date);
	}

	// 获取当前的时间戳
	public static Instant getTimestamp() {
		return Instant.now();
	}

	// 使用预定义的格式化工具去解析或格式化日期
	public static LocalDate formateDate(String date,DateTimeFormatter formatter) {
		return LocalDate.parse(date, formatter);
	}

	public static void main(String[] args) {
		// getCurrentDate();
		// handleSpecilDate(2021,1,21);
		// cycleDate(2021,1,21);
		// getCurrentTime();
		// clock();
	}
}
